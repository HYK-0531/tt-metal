name: Uplift LLK Submodule

on:
  workflow_dispatch:
    inputs:
      workflow_timeout:
        description: 'Timeout for workflows in minutes'
        required: false
        type: number
        default: 180
      skip_draft:
        description: 'Skip creating PR as draft'
        required: false
        type: boolean
        default: false
      recheck_tests:
        description: 'Re-check latest test runs (for when tests were manually rerun)'
        required: false
        type: boolean
        default: false
  workflow_call:
    inputs:
      workflow_timeout:
        description: 'Timeout for workflows in minutes'
        required: false
        type: number
        default: 180
      skip_draft:
        description: 'Skip creating PR as draft'
        required: false
        type: boolean
        default: false
      recheck_tests:
        description: 'Re-check latest test runs (for when tests were manually rerun)'
        required: false
        type: boolean
        default: false
  repository_dispatch:
    types: [trigger-llk-update]
  schedule:
    - cron: '0 0,12 * * *'

env:
  BRANCH_NAME: llk-submodule-uplift
  SUBMODULE_PATH: tt_metal/third_party/tt_llk

permissions:
  contents: write          # To push commits and create branches
  pull-requests: write     # To create and update pull requests
  actions: write           # To trigger other workflows
  issues: write            # To comment on PRs (PRs are a type of issue)
  checks: read             # To read workflow run status

jobs:
  llk-submodule-uplift:
    if: inputs.recheck_tests != true
    runs-on: ubuntu-latest
    outputs:
      pr-number: ${{ steps.create-pr.outputs.pull-request-number }}
      should-run-wormhole: ${{ steps.analyze-changes.outputs.should-run-wormhole }}
      should-run-blackhole: ${{ steps.analyze-changes.outputs.should-run-blackhole }}
      old-sha: ${{ steps.update-submodule.outputs.old-sha }}
      new-sha: ${{ steps.update-submodule.outputs.new-sha }}
      has-changes: ${{ steps.update-submodule.outputs.has-changes }}
      changed-files: ${{ steps.analyze-changes.outputs.changed-files }}
      commits-table: ${{ steps.analyze-changes.outputs.commits-table }}
    steps:
      - name: Checkout parent repo
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Ensure we get full history

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Ensure we have latest main
        run: |
          # Fetch latest main and stay on it
          git fetch origin main
          git checkout main
          git reset --hard origin/main

          # Initialize and update submodules to get latest state
          git submodule init
          git submodule update
          echo "‚úÖ Updated to latest main with fresh submodules"

      - name: Update submodule
        id: update-submodule
        run: |
          cd ${{ env.SUBMODULE_PATH }}
          OLD_SHA=$(git rev-parse --short=7 HEAD)
          echo "old-sha=$OLD_SHA" >> $GITHUB_OUTPUT

          # Fetch full history to ensure we can see all commits
          git fetch --unshallow origin main 2>/dev/null || git fetch origin main
          git checkout main
          git pull origin main

          NEW_SHA=$(git rev-parse --short=7 HEAD)
          echo "new-sha=$NEW_SHA" >> $GITHUB_OUTPUT

          if [ "$OLD_SHA" = "$NEW_SHA" ]; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No changes detected (SHA unchanged)"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes detected: $OLD_SHA -> $NEW_SHA"
          fi

      - name: Analyze changes and generate PR body
        id: analyze-changes
        if: steps.update-submodule.outputs.has-changes == 'true'
        run: |
          cd ${{ env.SUBMODULE_PATH }}
          OLD_SHA="${{ steps.update-submodule.outputs.old-sha }}"
          NEW_SHA="${{ steps.update-submodule.outputs.new-sha }}"

          # Get changed files once
          CHANGED_FILES=$(git diff --name-only ${OLD_SHA}..${NEW_SHA})
          echo "changed-files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Check for architecture-specific changes
          if echo "$CHANGED_FILES" | grep -q "^tt_llk_wormhole_b0/"; then
            echo "should-run-wormhole=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Detected Wormhole changes"
          else
            echo "should-run-wormhole=false" >> $GITHUB_OUTPUT
          fi

          if echo "$CHANGED_FILES" | grep -q "^tt_llk_blackhole/"; then
            echo "should-run-blackhole=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Detected Blackhole changes"
          else
            echo "should-run-blackhole=false" >> $GITHUB_OUTPUT
          fi

          # Generate commits table and save to GITHUB_OUTPUT
          COMMIT_COUNT=$(git log --oneline ${OLD_SHA}..${NEW_SHA} | wc -l)
          echo "Found $COMMIT_COUNT commits using ${OLD_SHA}..${NEW_SHA}"

          # Generate commits table content
          COMMITS_TABLE_CONTENT="| Commit | Message | Author | PR |"$'\n'
          COMMITS_TABLE_CONTENT+="|--------|---------|---------|-----|"$'\n'

          if [ "$COMMIT_COUNT" -gt 0 ]; then
            # Generate commits table content
            while IFS='|' read -r short_hash message author full_hash; do
              # Skip empty lines
              if [ -z "$short_hash" ]; then
                continue
              fi

              # Try to get the PR number from the commit message and clean the message
              pr_number=$(echo "$message" | grep -oE '\(#[0-9]+\)' | grep -oE '[0-9]+' | head -1)
              # Remove (#number) from the message for cleaner display
              clean_message=$(echo "$message" | sed 's/ *(#[0-9]\+) *$//')

              if [ -n "$pr_number" ]; then
                COMMITS_TABLE_CONTENT+="| [$short_hash](https://github.com/tenstorrent/tt-llk/commit/$full_hash) | $clean_message | $author | [#$pr_number](https://github.com/tenstorrent/tt-llk/pull/$pr_number) |"$'\n'
              else
                COMMITS_TABLE_CONTENT+="| [$short_hash](https://github.com/tenstorrent/tt-llk/commit/$full_hash) | $clean_message | $author | - |"$'\n'
              fi
            done < <(git log --pretty=tformat:"%h|%s|%an|%H" ${OLD_SHA}..${NEW_SHA})
          else
            echo "No commits found - this shouldn't happen if we detected changes"
            COMMITS_TABLE_CONTENT+="| (No commits found) | - | - | - |"$'\n'
          fi

          # Save commits table to GITHUB_OUTPUT
          echo "commits-table<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS_TABLE_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Generate simple initial PR body (will be updated later with full details)
          cat > ../../../llk_commit_log.txt << EOF
          ## ‚¨ÜÔ∏è LLK Submodule Update

          Updating LLK submodule from \`$OLD_SHA\` to \`$NEW_SHA\`.

          *This PR body will be updated with detailed information shortly...*
          EOF

      - name: Create Pull Request
        id: create-pr
        if: steps.update-submodule.outputs.has-changes == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.TEMP_METAL_PAT }}
          commit-message: "chore: update LLK submodule to ${{ steps.update-submodule.outputs.new-sha }}"
          title: "chore: update LLK submodule to ${{ steps.update-submodule.outputs.new-sha }}"
          branch: ${{ env.BRANCH_NAME }}
          base: main
          delete-branch: true
          body-path: llk_commit_log.txt
          add-paths: |
            ${{ env.SUBMODULE_PATH }}
          draft: ${{ !inputs.skip_draft }}
          labels: |
            llk-update
            automated

      - name: Update PR body with changes information
        if: steps.update-submodule.outputs.has-changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.TEMP_METAL_PAT }}
        run: |
          PR_NUMBER="${{ steps.create-pr.outputs.pull-request-number }}"
          PR_URL="https://github.com/${{ github.repository }}/pull/$PR_NUMBER"
          OLD_SHA="${{ steps.update-submodule.outputs.old-sha }}"
          NEW_SHA="${{ steps.update-submodule.outputs.new-sha }}"

          # Get the changed files again for the updated body
          cd ${{ env.SUBMODULE_PATH }}
          CHANGED_FILES=$(git diff --name-only ${OLD_SHA}..${NEW_SHA})
          COMMIT_COUNT=$(git log --oneline ${OLD_SHA}..${NEW_SHA} | wc -l)
          FILE_COUNT=$(echo "$CHANGED_FILES" | wc -l)

          # Determine commit and file count labels
          if [ "$COMMIT_COUNT" -eq 1 ]; then
            COMMIT_LABEL="$COMMIT_COUNT commit"
          else
            COMMIT_LABEL="$COMMIT_COUNT commits"
          fi

          if [ "$FILE_COUNT" -eq 1 ]; then
            FILE_LABEL="$FILE_COUNT file"
          else
            FILE_LABEL="$FILE_COUNT files"
          fi

          # Generate updated PR body with PR link (use commits table from step output)
          cat > ../../../updated_llk_commit_log.txt << EOF

          ## üìã Summary
          This PR updates the LLK submodule to the latest version from the main branch.

          | Package | Update |
          |---------|---------|
          | tt-llk | [\`$OLD_SHA\`](https://github.com/tenstorrent/tt-llk/commit/$OLD_SHA) [->](https://github.com/tenstorrent/tt-llk/compare/$OLD_SHA...$NEW_SHA) [\`$NEW_SHA\`](https://github.com/tenstorrent/tt-llk/commit/$NEW_SHA) |

          ### üìù Changelog ($COMMIT_LABEL)
          ${{ steps.analyze-changes.outputs.commits-table }}

          ### üìÅ Files Changed ($FILE_LABEL)
          <details>
          <summary>Click to expand file list</summary>

          $(echo "$CHANGED_FILES" | sed 's/^/- `/' | sed 's/$/`/')
          </details>

          ### üèóÔ∏è Architecture Impact
          $(if echo "$CHANGED_FILES" | grep -q "^tt_llk_wormhole_b0/"; then echo "- ‚ö†Ô∏è **Wormhole** changes detected - will trigger all-post-commit tests"; fi)
          $(if echo "$CHANGED_FILES" | grep -q "^tt_llk_blackhole/"; then echo "- ‚ö†Ô∏è **Blackhole** changes detected - will trigger blackhole-post-commit tests"; fi)
          $(if ! echo "$CHANGED_FILES" | grep -q "^tt_llk_wormhole_b0/\|^tt_llk_blackhole/"; then echo "- ‚ÑπÔ∏è No architecture-specific changes detected"; fi)

          <!-- WORKFLOW_DECISIONS:should-run-wormhole=${{ steps.analyze-changes.outputs.should-run-wormhole }},should-run-blackhole=${{ steps.analyze-changes.outputs.should-run-blackhole }} -->

          ### ü§ñ Automation Status
          - **Created by:** LLK Auto-Uplift Workflow
          - **Trigger:** $(if [ "${{ github.event_name }}" = "schedule" ]; then echo "Scheduled ($(date))"; elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then echo "Repository Dispatch"; else echo "Manual/Workflow Call"; fi)

          ### üß™ Test Status
          Test results and workflow status will be updated here automatically.

          ---
          *This PR will be automatically updated with test results and merged upon successful completion of all required checks.*
          EOF

          # Update the PR body with the new content including PR link
          gh pr edit "$PR_NUMBER" --body-file ../../../updated_llk_commit_log.txt --repo "${{ github.repository }}"

          echo "‚úÖ Updated PR #$PR_NUMBER with PR link"

      - name: No changes summary
        if: steps.update-submodule.outputs.has-changes == 'false'
        run: |
          echo "üéâ LLK submodule is already up to date!"
          echo "Current SHA: ${{ steps.update-submodule.outputs.old-sha }}"

  trigger-and-monitor-workflows:
    needs: [llk-submodule-uplift]
    if: |
      inputs.recheck_tests != true &&
      needs.llk-submodule-uplift.outputs.has-changes == 'true' &&
      (
        needs.llk-submodule-uplift.outputs.should-run-wormhole == 'true' ||
        needs.llk-submodule-uplift.outputs.should-run-blackhole == 'true'
      )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout for GitHub CLI
        uses: actions/checkout@v4

      - name: Trigger and monitor workflows
        env:
          GH_TOKEN: ${{ secrets.TEMP_METAL_PAT }}
        run: |
          set -euo pipefail
          TIMEOUT_MINUTES=${{ inputs.workflow_timeout || 180 }}

          # Build workflow list based on detected changes
          WORKFLOWS_TO_RUN=()

          if [ "${{ needs.llk-submodule-uplift.outputs.should-run-wormhole }}" == "true" ]; then
            WORKFLOWS_TO_RUN+=("all-post-commit-workflows.yaml")
          fi

          if [ "${{ needs.llk-submodule-uplift.outputs.should-run-blackhole }}" == "true" ]; then
            WORKFLOWS_TO_RUN+=("blackhole-post-commit.yaml")
          fi

          if [ ${#WORKFLOWS_TO_RUN[@]} -eq 0 ]; then
            echo "No workflows to trigger based on changes detected"

            # Comment on PR explaining why no workflows are running
            gh pr comment "${{ needs.llk-submodule-uplift.outputs.pr-number }}" \
              --body "‚ÑπÔ∏è **No architecture-specific tests required**: This LLK update doesn't contain Wormhole or Blackhole specific changes, so no post-commit workflows need to be triggered." \
              --repo "${{ github.repository }}"

            exit 0
          fi

          echo "üöÄ Triggering ${#WORKFLOWS_TO_RUN[@]} workflow(s)..."

          # Trigger workflows and collect run IDs with workflow mapping
          declare -A RUN_ID_TO_WORKFLOW
          declare -A WORKFLOW_RETRY_COUNT
          RUN_IDS=()
          MAX_RETRIES=3

          for workflow in "${WORKFLOWS_TO_RUN[@]}"; do
            echo "Triggering $workflow..."

            # Get existing runs before triggering to establish baseline
            EXISTING_RUNS=$(gh run list --workflow "$workflow" --branch "${{ env.BRANCH_NAME }}" --limit 10 --json databaseId --jq '.[].databaseId' | tr '\n' ' ')
            echo "Existing runs before trigger: $EXISTING_RUNS"

            if gh workflow run "$workflow" --ref "${{ env.BRANCH_NAME }}" --repo "${{ github.repository }}"; then
              echo "‚úÖ Successfully triggered $workflow"

              # Wait for the new run to appear with retry logic
              RUN_ID=""
              for i in {1..12}; do
                # Get current runs and find the new one
                CURRENT_RUNS=$(gh run list --workflow "$workflow" --branch "${{ env.BRANCH_NAME }}" --limit 10 --json databaseId --jq '.[].databaseId')

                # Find the run that wasn't in the existing list
                for run_id in $CURRENT_RUNS; do
                  if [[ ! " $EXISTING_RUNS " =~ " $run_id " ]]; then
                    RUN_ID="$run_id"
                    break
                  fi
                done

                if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
                  break
                fi
                echo "Attempt $i: Waiting for new workflow run to appear..."
                sleep 10
              done

              if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
                RUN_IDS+=("$RUN_ID")
                RUN_ID_TO_WORKFLOW["$RUN_ID"]="$workflow"
                WORKFLOW_RETRY_COUNT["$workflow"]=0
                echo "Monitoring run ID: $RUN_ID for workflow: $workflow"

                # Comment on PR with workflow link
                RUN_URL="https://github.com/${{ github.repository }}/actions/runs/$RUN_ID"
                WORKFLOW_DISPLAY_NAME=$(echo "$workflow" | sed 's/\.yaml$//' | sed 's/-/ /g' | sed 's/\b\w/\U&/g')
                gh pr comment "${{ needs.llk-submodule-uplift.outputs.pr-number }}" \
                  --body "üöÄ **$WORKFLOW_DISPLAY_NAME** triggered: [View run]($RUN_URL)" \
                  --repo "${{ github.repository }}"
              fi
            else
              echo "‚ùå Failed to trigger $workflow"
            fi
          done

          if [ ${#RUN_IDS[@]} -eq 0 ]; then
            echo "‚ùå No workflows were successfully triggered"
            exit 1
          fi

          # Monitor all runs
          echo "‚è≥ Monitoring ${#RUN_IDS[@]} workflow run(s)..."

          START_TIME=$(date +%s)
          TIMEOUT_SECONDS=$((TIMEOUT_MINUTES * 60))
          ALL_SUCCESS=true

          while [ ${#RUN_IDS[@]} -gt 0 ]; do
            # Check timeout
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))

            if [ $ELAPSED -ge $TIMEOUT_SECONDS ]; then
              echo "‚è∞ Timeout reached after ${TIMEOUT_MINUTES} minutes"
              for run_id in "${RUN_IDS[@]}"; do
                RUN_URL="https://github.com/${{ github.repository }}/actions/runs/$run_id"
                WORKFLOW_NAME="${RUN_ID_TO_WORKFLOW[$run_id]}"
                WORKFLOW_DISPLAY_NAME=$(echo "$WORKFLOW_NAME" | sed 's/\.yaml$//' | sed 's/-/ /g' | sed 's/\b\w/\U&/g')
                gh pr comment "${{ needs.llk-submodule-uplift.outputs.pr-number }}" \
                  --body "‚è∞ **$WORKFLOW_DISPLAY_NAME** timed out after ${TIMEOUT_MINUTES} minutes: [View run]($RUN_URL)" \
                  --repo "${{ github.repository }}"
              done
              ALL_SUCCESS=false
              break
            fi

            # Check status of all runs
            REMAINING_RUNS=()
            for run_id in "${RUN_IDS[@]}"; do
              STATUS=$(gh run view "$run_id" --json status --jq '.status // "unknown"' 2>/dev/null || echo "unknown")
              WORKFLOW_NAME="${RUN_ID_TO_WORKFLOW[$run_id]}"
              WORKFLOW_DISPLAY_NAME=$(echo "$WORKFLOW_NAME" | sed 's/\.yaml$//' | sed 's/-/ /g' | sed 's/\b\w/\U&/g')

              if [ "$STATUS" == "completed" ]; then
                CONCLUSION=$(gh run view "$run_id" --json conclusion --jq '.conclusion // "unknown"')
                RUN_URL="https://github.com/${{ github.repository }}/actions/runs/$run_id"

                if [ "$CONCLUSION" == "success" ]; then
                  echo "‚úÖ $WORKFLOW_DISPLAY_NAME (Run $run_id) completed successfully"
                  gh pr comment "${{ needs.llk-submodule-uplift.outputs.pr-number }}" \
                    --body "‚úÖ **$WORKFLOW_DISPLAY_NAME** passed: [View run]($RUN_URL)" \
                    --repo "${{ github.repository }}"
                else
                  echo "‚ùå $WORKFLOW_DISPLAY_NAME (Run $run_id) failed with conclusion: $CONCLUSION"

                  # Check if we should retry this workflow
                  CURRENT_RETRIES=${WORKFLOW_RETRY_COUNT["$WORKFLOW_NAME"]}
                  if [ "$CURRENT_RETRIES" -lt "$MAX_RETRIES" ]; then
                    NEW_RETRY_COUNT=$((CURRENT_RETRIES + 1))
                    WORKFLOW_RETRY_COUNT["$WORKFLOW_NAME"]=$NEW_RETRY_COUNT

                    echo "üîÑ Retrying $WORKFLOW_DISPLAY_NAME (attempt $NEW_RETRY_COUNT/$MAX_RETRIES)"
                    gh pr comment "${{ needs.llk-submodule-uplift.outputs.pr-number }}" \
                      --body "üîÑ **$WORKFLOW_DISPLAY_NAME** failed, retrying (attempt $NEW_RETRY_COUNT/$MAX_RETRIES): [Failed run]($RUN_URL)" \
                      --repo "${{ github.repository }}"

                    # Rerun the failed workflow
                    if gh run rerun "$run_id" --failed-jobs --repo "${{ github.repository }}"; then
                      echo "‚úÖ Successfully triggered retry for $WORKFLOW_DISPLAY_NAME"

                      # Wait for the new run to appear and add it to monitoring
                      sleep 30
                      NEW_RUN_ID=""
                      for i in {1..6}; do
                        LATEST_RUN=$(gh run list --workflow "$WORKFLOW_NAME" --branch "${{ env.BRANCH_NAME }}" --limit 1 --json databaseId --jq '.[0].databaseId')
                        if [ "$LATEST_RUN" != "$run_id" ] && [ -n "$LATEST_RUN" ]; then
                          NEW_RUN_ID="$LATEST_RUN"
                          break
                        fi
                        echo "Waiting for retry run to appear (attempt $i/6)..."
                        sleep 10
                      done

                      if [ -n "$NEW_RUN_ID" ]; then
                        # Replace the old run ID with the new one for continued monitoring
                        RUN_IDS=("${RUN_IDS[@]/$run_id}")
                        RUN_IDS+=("$NEW_RUN_ID")
                        RUN_ID_TO_WORKFLOW["$NEW_RUN_ID"]="$WORKFLOW_NAME"
                        unset RUN_ID_TO_WORKFLOW["$run_id"]
                        echo "üìç Now monitoring retry run ID: $NEW_RUN_ID"

                        # Continue to next iteration to keep monitoring the retry
                        continue
                      else
                        echo "‚ö†Ô∏è Could not find retry run ID, will mark as failed"
                      fi
                    else
                      echo "‚ùå Failed to trigger retry for $WORKFLOW_DISPLAY_NAME"
                    fi
                  else
                    echo "‚ùå $WORKFLOW_DISPLAY_NAME exceeded max retries ($MAX_RETRIES)"
                    gh pr comment "${{ needs.llk-submodule-uplift.outputs.pr-number }}" \
                      --body "‚ùå **$WORKFLOW_DISPLAY_NAME** failed after $MAX_RETRIES attempts (conclusion: \`$CONCLUSION\`): [View run]($RUN_URL)" \
                      --repo "${{ github.repository }}"
                  fi

                  ALL_SUCCESS=false
                fi
              else
                # Still running, keep monitoring
                REMAINING_RUNS+=("$run_id")
                echo "‚åõ $WORKFLOW_DISPLAY_NAME (Run $run_id) status: $STATUS (${ELAPSED}s/${TIMEOUT_SECONDS}s)"
              fi
            done

            RUN_IDS=("${REMAINING_RUNS[@]}")

            # Wait before next check
            if [ ${#RUN_IDS[@]} -gt 0 ]; then
              sleep 300 # check every 5 minutes
            fi
          done

          if [ "$ALL_SUCCESS" == "true" ]; then
            echo "üéâ All workflows completed successfully"
          else
            echo "üí• One or more workflows failed or timed out"
            exit 1
          fi

  recheck-tests:
    if: inputs.recheck_tests == true
    runs-on: ubuntu-latest
    outputs:
      tests-passed: ${{ steps.check-latest.outputs.tests-passed }}
    steps:
      - name: Checkout parent repo
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.TEMP_METAL_PAT }}
          fetch-depth: 0

      - name: Check latest test runs
        id: check-latest
        env:
          GH_TOKEN: ${{ secrets.TEMP_METAL_PAT }}
        run: |
          # Find the LLK PR number
          PR_NUMBER=$(gh pr list --head "${{ env.BRANCH_NAME }}" --json number --jq '.[0].number // empty')

          if [ -z "$PR_NUMBER" ]; then
            echo "‚ùå No LLK PR found on branch ${{ env.BRANCH_NAME }}"
            exit 1
          fi

          echo "üîç Found LLK PR #$PR_NUMBER, reading workflow decisions from PR body..."

          # Get the original workflow decisions from the PR body
          PR_BODY=$(gh pr view "$PR_NUMBER" --json body --jq '.body' --repo "${{ github.repository }}")

          # Extract workflow decisions from the hidden comment in PR body
          if echo "$PR_BODY" | grep -q "WORKFLOW_DECISIONS:"; then
            WORKFLOW_DECISIONS=$(echo "$PR_BODY" | grep -o "WORKFLOW_DECISIONS:[^>]*" | head -1)
            echo "Found workflow decisions: $WORKFLOW_DECISIONS"

            # Parse the decisions
            if echo "$WORKFLOW_DECISIONS" | grep -q "should-run-wormhole=true"; then
              SHOULD_RUN_WORMHOLE=true
              echo "‚úÖ Wormhole workflows should have run (from original analysis)"
            else
              SHOULD_RUN_WORMHOLE=false
              echo "‚ÑπÔ∏è Wormhole workflows should NOT have run (from original analysis)"
            fi

            if echo "$WORKFLOW_DECISIONS" | grep -q "should-run-blackhole=true"; then
              SHOULD_RUN_BLACKHOLE=true
              echo "‚úÖ Blackhole workflows should have run (from original analysis)"
            else
              SHOULD_RUN_BLACKHOLE=false
              echo "‚ÑπÔ∏è Blackhole workflows should NOT have run (from original analysis)"
            fi
          else
            echo "‚ö†Ô∏è No workflow decisions found in PR body, falling back to change analysis..."

            # Fallback to analyzing changes (original logic)
            cd ${{ env.SUBMODULE_PATH }}

            MERGE_COMMIT=$(gh pr view "$PR_NUMBER" --json mergeCommit --jq '.mergeCommit.oid // empty' --repo "${{ github.repository }}")
            if [ -n "$MERGE_COMMIT" ]; then
              PARENT_COMMITS=$(git log --pretty=format:"%H" -n 2 "$MERGE_COMMIT")
              OLD_SHA=$(echo "$PARENT_COMMITS" | tail -n 1 | cut -c1-7)
              NEW_SHA=$(echo "$PARENT_COMMITS" | head -n 1 | cut -c1-7)
            else
              git fetch origin main
              OLD_SHA=$(git merge-base HEAD origin/main | cut -c1-7)
              NEW_SHA=$(git rev-parse HEAD | cut -c1-7)
            fi

            echo "üîç Analyzing LLK changes: $OLD_SHA -> $NEW_SHA"
            CHANGED_FILES=$(git diff --name-only ${OLD_SHA}..${NEW_SHA})

            SHOULD_RUN_WORMHOLE=false
            SHOULD_RUN_BLACKHOLE=false

            if echo "$CHANGED_FILES" | grep -q "^tt_llk_wormhole_b0/"; then
              SHOULD_RUN_WORMHOLE=true
              echo "‚úÖ Wormhole changes detected - should check all-post-commit-workflows"
            fi

            if echo "$CHANGED_FILES" | grep -q "^tt_llk_blackhole/"; then
              SHOULD_RUN_BLACKHOLE=true
              echo "‚úÖ Blackhole changes detected - should check blackhole-post-commit"
            fi

            if [ "$SHOULD_RUN_WORMHOLE" = false ] && [ "$SHOULD_RUN_BLACKHOLE" = false ]; then
              echo "‚ÑπÔ∏è No architecture-specific changes detected, checking both workflows"
              SHOULD_RUN_WORMHOLE=true
              SHOULD_RUN_BLACKHOLE=true
            fi

            cd - > /dev/null
          fi

          echo "üîç Final workflow check decisions:"
          echo "  - Should run Wormhole: $SHOULD_RUN_WORMHOLE"
          echo "  - Should run Blackhole: $SHOULD_RUN_BLACKHOLE"

          # Check latest runs for workflows that should have been triggered
          ALL_PASSED=true
          CHECKED_WORKFLOWS=0
          FAILED_WORKFLOWS=()
          SUCCEEDED_WORKFLOWS=()

          if [ "$SHOULD_RUN_WORMHOLE" = true ]; then
            echo "üîç Checking latest All Post Commit Workflows run..."

            # Get PR creation time to filter runs created after PR
            PR_CREATED_AT=$(gh pr view "$PR_NUMBER" --json createdAt --jq '.createdAt' --repo "${{ github.repository }}")
            echo "PR created at: $PR_CREATED_AT"

            # Get workflow runs created after PR creation time
            LATEST_RUN_DATA=$(gh run list --workflow "all-post-commit-workflows.yaml" --branch "${{ env.BRANCH_NAME }}" --limit 10 --json conclusion,databaseId,url,createdAt --jq "map(select(.createdAt >= \"$PR_CREATED_AT\")) | .[0] // {}")
            LATEST_CONCLUSION=$(echo "$LATEST_RUN_DATA" | jq -r '.conclusion // "none"')

            if [ "$LATEST_CONCLUSION" != "none" ]; then
              CHECKED_WORKFLOWS=$((CHECKED_WORKFLOWS + 1))
              RUN_ID=$(echo "$LATEST_RUN_DATA" | jq -r '.databaseId // ""')
              RUN_URL=$(echo "$LATEST_RUN_DATA" | jq -r '.url // ""')
              RUN_CREATED_AT=$(echo "$LATEST_RUN_DATA" | jq -r '.createdAt // ""')
              echo "Found WH run created at: $RUN_CREATED_AT"

              if [ "$LATEST_CONCLUSION" != "success" ]; then
                echo "‚ùå All Post Commit Workflows latest run: $LATEST_CONCLUSION"
                FAILED_WORKFLOWS+=("**All Post Commit Workflows** (conclusion: \`$LATEST_CONCLUSION\`): [View run]($RUN_URL)")
                ALL_PASSED=false
              else
                echo "‚úÖ All Post Commit Workflows latest run: success"
                SUCCEEDED_WORKFLOWS+=("**All Post Commit Workflows**: [View run]($RUN_URL)")
              fi
            else
              echo "‚ùå All Post Commit Workflows should have run but no runs found after PR creation"
              FAILED_WORKFLOWS+=("**All Post Commit Workflows**: No runs found after PR creation")
              ALL_PASSED=false
            fi
          fi

          if [ "$SHOULD_RUN_BLACKHOLE" = true ]; then
            echo "üîç Checking latest Blackhole Post Commit run..."

            # Get workflow runs created after PR creation time
            LATEST_RUN_DATA=$(gh run list --workflow "blackhole-post-commit.yaml" --branch "${{ env.BRANCH_NAME }}" --limit 10 --json conclusion,databaseId,url,createdAt --jq "map(select(.createdAt >= \"$PR_CREATED_AT\")) | .[0] // {}")
            LATEST_CONCLUSION=$(echo "$LATEST_RUN_DATA" | jq -r '.conclusion // "none"')

            if [ "$LATEST_CONCLUSION" != "none" ]; then
              CHECKED_WORKFLOWS=$((CHECKED_WORKFLOWS + 1))
              RUN_ID=$(echo "$LATEST_RUN_DATA" | jq -r '.databaseId // ""')
              RUN_URL=$(echo "$LATEST_RUN_DATA" | jq -r '.url // ""')
              RUN_CREATED_AT=$(echo "$LATEST_RUN_DATA" | jq -r '.createdAt // ""')
              echo "Found BH run created at: $RUN_CREATED_AT"

              if [ "$LATEST_CONCLUSION" != "success" ]; then
                echo "‚ùå Blackhole Post Commit latest run: $LATEST_CONCLUSION"
                FAILED_WORKFLOWS+=("**Blackhole Post Commit** (conclusion: \`$LATEST_CONCLUSION\`): [View run]($RUN_URL)")
                ALL_PASSED=false
              else
                echo "‚úÖ Blackhole Post Commit latest run: success"
                SUCCEEDED_WORKFLOWS+=("**Blackhole Post Commit**: [View run]($RUN_URL)")
              fi
            else
              echo "‚ùå Blackhole Post Commit should have run but no runs found after PR creation"
              FAILED_WORKFLOWS+=("**Blackhole Post Commit**: No runs found after PR creation")
              ALL_PASSED=false
            fi
          fi

          if [ "$CHECKED_WORKFLOWS" -eq 0 ]; then
            if [ "$SHOULD_RUN_WORMHOLE" = false ] && [ "$SHOULD_RUN_BLACKHOLE" = false ]; then
              echo "‚ÑπÔ∏è No workflows were expected to run for this change set"
              ALL_PASSED=true
            else
              echo "‚ùå No workflows were expected to run - this shouldn't happen"
              ALL_PASSED=false
            fi
          fi

          echo "tests-passed=$ALL_PASSED" >> $GITHUB_OUTPUT

          # Build detailed comment with results
          if [ "$ALL_PASSED" == "true" ]; then
            if [ "$CHECKED_WORKFLOWS" -eq 0 ]; then
              echo "‚ÑπÔ∏è No workflows were required to run"
              COMMENT_BODY="‚ÑπÔ∏è **Test Re-check**: No workflows were required to run for this LLK change set."$'\n\n'"Based on the original analysis, this update did not require any architecture-specific testing."
            else
              echo "üéâ All required test runs passed!"
              COMMENT_BODY="‚úÖ **Test Re-check Successful**: All required workflow runs have passed after manual rerun."$'\n\n'"### ‚úÖ Successful Runs"
              for workflow in "${SUCCEEDED_WORKFLOWS[@]}"; do
                COMMENT_BODY="$COMMENT_BODY"$'\n'"- $workflow"
              done
            fi
          else
            echo "‚ùå Some required test runs still failing"
            COMMENT_BODY="‚ùå **Test Re-check Failed**: Some required workflows are still failing."$'\n\n'"### ‚ùå Failed Runs"
            for workflow in "${FAILED_WORKFLOWS[@]}"; do
              COMMENT_BODY="$COMMENT_BODY"$'\n'"- $workflow"
            done

            if [ ${#SUCCEEDED_WORKFLOWS[@]} -gt 0 ]; then
              COMMENT_BODY="$COMMENT_BODY"$'\n\n'"### ‚úÖ Successful Runs"
              for workflow in "${SUCCEEDED_WORKFLOWS[@]}"; do
                COMMENT_BODY="$COMMENT_BODY"$'\n'"- $workflow"
              done
            fi
          fi

          gh pr comment "$PR_NUMBER" \
            --body "$COMMENT_BODY" \
            --repo "${{ github.repository }}"

          # Exit with failure if tests are still failing
          if [ "$ALL_PASSED" != "true" ]; then
            echo "‚ùå Exiting with failure because some tests are still failing"
            exit 1
          fi

  finalize:
    needs: [llk-submodule-uplift, trigger-and-monitor-workflows, recheck-tests]
    if: |
      always() && (
        (
          inputs.recheck_tests != true &&
          needs.llk-submodule-uplift.outputs.has-changes == 'true' &&
          needs.llk-submodule-uplift.result == 'success' &&
          (
            needs.trigger-and-monitor-workflows.result == 'success' ||
            needs.trigger-and-monitor-workflows.result == 'skipped'
          )
        ) || (
          inputs.recheck_tests == true &&
          needs.recheck-tests.outputs.tests-passed == 'true'
        )
      )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout parent repo
        if: inputs.recheck_tests == true
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TEMP_METAL_PAT }}

      - name: Auto-merge PR
        env:
          GH_TOKEN: ${{ secrets.TEMP_METAL_PAT }}
        run: |
          echo "üöÄ Finalizing PR merge..."

          # Get PR number - either from llk-submodule-uplift output or find it by branch
          if [ "${{ inputs.recheck_tests }}" == "true" ]; then
            # When coming from recheck-tests, find the PR by branch
            PR_NUMBER=$(gh pr list --head "${{ env.BRANCH_NAME }}" --json number --jq '.[0].number // empty' --repo "${{ github.repository }}")
            if [ -z "$PR_NUMBER" ]; then
              echo "‚ùå No LLK PR found on branch ${{ env.BRANCH_NAME }}"
              exit 1
            fi
            echo "üìç Found PR #$PR_NUMBER from recheck-tests flow"
          else
            # Normal flow - use output from llk-submodule-uplift
            PR_NUMBER="${{ needs.llk-submodule-uplift.outputs.pr-number }}"
            echo "üìç Using PR #$PR_NUMBER from normal flow"
          fi

          # Mark PR as ready if it was created as draft
          if [ "${{ inputs.skip_draft }}" != "true" ]; then
            echo "üìù Marking PR as ready for review..."
            if ! gh pr ready "$PR_NUMBER" --repo "${{ github.repository }}"; then
              echo "‚ö†Ô∏è Unable to mark PR as ready - may already be ready or have insufficient permissions"
            fi
          fi

          # Comment on PR that it's ready for review
          echo "üìù PR #$PR_NUMBER is ready for review and merge"

          # Determine the appropriate completion message
          if [ "${{ needs.trigger-and-monitor-workflows.result }}" = "success" ]; then
            COMPLETION_MESSAGE="üéâ **LLK submodule update completed successfully!**
            All required workflows have passed. This PR is ready for review and merge."
          elif [ "${{ needs.trigger-and-monitor-workflows.result }}" = "skipped" ]; then
            COMPLETION_MESSAGE="üéâ **LLK submodule update completed successfully!**
            No architecture-specific tests were required. This PR is ready for review and merge."
          else
            COMPLETION_MESSAGE="üéâ **LLK submodule update completed successfully!**
            This PR is ready for review and merge."
          fi

          gh pr comment "$PR_NUMBER" \
            --body "$COMPLETION_MESSAGE" \
            --repo "${{ github.repository }}" || echo "‚ö†Ô∏è Unable to comment on PR - insufficient permissions"

          # Update the Test Status section in the PR body
          echo "üîÑ Updating PR body with final test status..."

          # Build test status from actual workflow results
          TEST_STATUS_LINES=""

          if [ "${{ needs.trigger-and-monitor-workflows.result }}" = "skipped" ]; then
            TEST_STATUS_LINES="$TEST_STATUS_LINES"$'\n'"- ‚ÑπÔ∏è **No architecture-specific tests required** - No Wormhole or Blackhole tests were run"
          else
            # Get PR creation time to filter runs created after PR
            PR_CREATED_AT=$(gh pr view "$PR_NUMBER" --json createdAt --jq '.createdAt' --repo "${{ github.repository }}")
            echo "PR created at: $PR_CREATED_AT"

            # Determine which workflows should have run
            if [ "${{ inputs.recheck_tests }}" == "true" ]; then
              # When coming from recheck-tests, read decisions from PR body
              PR_BODY=$(gh pr view "$PR_NUMBER" --json body --jq '.body' --repo "${{ github.repository }}")
              
              if echo "$PR_BODY" | grep -q "WORKFLOW_DECISIONS:"; then
                WORKFLOW_DECISIONS=$(echo "$PR_BODY" | grep -o "WORKFLOW_DECISIONS:[^>]*" | head -1)
                echo "Found workflow decisions: $WORKFLOW_DECISIONS"
                
                if echo "$WORKFLOW_DECISIONS" | grep -q "should-run-wormhole=true"; then
                  SHOULD_RUN_WORMHOLE=true
                else
                  SHOULD_RUN_WORMHOLE=false
                fi
                
                if echo "$WORKFLOW_DECISIONS" | grep -q "should-run-blackhole=true"; then
                  SHOULD_RUN_BLACKHOLE=true
                else
                  SHOULD_RUN_BLACKHOLE=false
                fi
              else
                echo "‚ö†Ô∏è No workflow decisions found in PR body"
                SHOULD_RUN_WORMHOLE=false
                SHOULD_RUN_BLACKHOLE=false
              fi
            else
              # Normal flow - use outputs from llk-submodule-uplift
              SHOULD_RUN_WORMHOLE="${{ needs.llk-submodule-uplift.outputs.should-run-wormhole }}"
              SHOULD_RUN_BLACKHOLE="${{ needs.llk-submodule-uplift.outputs.should-run-blackhole }}"
            fi

            echo "Final test status decisions:"
            echo "  - Should run Wormhole: $SHOULD_RUN_WORMHOLE"
            echo "  - Should run Blackhole: $SHOULD_RUN_BLACKHOLE"

            # Post-commit jobs should have run, get their actual results
            if [ "$SHOULD_RUN_WORMHOLE" = "true" ]; then
              WH_RUN=$(gh run list --workflow "all-post-commit-workflows.yaml" --branch "${{ env.BRANCH_NAME }}" --limit 10 --json databaseId,url,conclusion,createdAt --jq "map(select(.createdAt >= \"$PR_CREATED_AT\")) | .[0] // {}" --repo "${{ github.repository }}")
              WH_URL=$(echo "$WH_RUN" | jq -r '.url // ""')
              WH_CONCLUSION=$(echo "$WH_RUN" | jq -r '.conclusion // ""')
              if [ "$WH_CONCLUSION" = "success" ]; then
                TEST_STATUS_LINES="$TEST_STATUS_LINES"$'\n'"- ‚úÖ **All Post Commit Workflows** passed: [View run]($WH_URL)"
              else
                TEST_STATUS_LINES="$TEST_STATUS_LINES"$'\n'"- ‚ùå **All Post Commit Workflows** failed (conclusion: \`$WH_CONCLUSION\`): [View run]($WH_URL)"
              fi
            fi

            if [ "$SHOULD_RUN_BLACKHOLE" = "true" ]; then
              BH_RUN=$(gh run list --workflow "blackhole-post-commit.yaml" --branch "${{ env.BRANCH_NAME }}" --limit 10 --json databaseId,url,conclusion,createdAt --jq "map(select(.createdAt >= \"$PR_CREATED_AT\")) | .[0] // {}" --repo "${{ github.repository }}")
              BH_URL=$(echo "$BH_RUN" | jq -r '.url // ""')
              BH_CONCLUSION=$(echo "$BH_RUN" | jq -r '.conclusion // ""')
              if [ "$BH_CONCLUSION" = "success" ]; then
                TEST_STATUS_LINES="$TEST_STATUS_LINES"$'\n'"- ‚úÖ **Blackhole Post Commit** passed: [View run]($BH_URL)"
              else
                TEST_STATUS_LINES="$TEST_STATUS_LINES"$'\n'"- ‚ùå **Blackhole Post Commit** failed (conclusion: \`$BH_CONCLUSION\`): [View run]($BH_URL)"
              fi
            fi
          fi

          # Build final test status
          if [ -n "$TEST_STATUS_LINES" ]; then
            TEST_STATUS="### üß™ Test Status"$'\n'"**Workflow Results:**"$'\n'"$TEST_STATUS_LINES"
          else
            TEST_STATUS="### üß™ Test Status"$'\n'"‚úÖ **Workflow completed successfully** - Ready for review"
          fi

          # Get current PR body and update the Test Status section
          CURRENT_BODY=$(gh pr view "$PR_NUMBER" --json body --jq '.body' --repo "${{ github.repository }}")
          UPDATED_BODY=$(echo "$CURRENT_BODY" | sed -E '/### üß™ Test Status.*/,$d')
          UPDATED_BODY="$UPDATED_BODY"$'\n\n'"$TEST_STATUS"

          # Update PR body
          echo "$UPDATED_BODY" | gh pr edit "$PR_NUMBER" --body-file - --repo "${{ github.repository }}"
          echo "‚úÖ Updated PR body with final test status"
          echo "‚úÖ Workflow completed successfully - PR #$PR_NUMBER is ready for manual review"
