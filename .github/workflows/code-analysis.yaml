name: Uplift LLK Submodule

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      workflow_timeout:
        description: 'Timeout for workflows in minutes'
        required: false
        type: number
        default: 120
      skip_draft:
        description: 'Skip creating PR as draft'
        required: false
        type: boolean
        default: false
  repository_dispatch:
    types: [trigger-llk-update]
  schedule:
    - cron: '0 0,12 * * *'

env:
  BRANCH_NAME: llk-submodule-uplift
  SUBMODULE_PATH: tt_metal/third_party/tt_llk

permissions:
  contents: write          # To push commits and create branches
  pull-requests: write     # To create and update pull requests
  actions: write           # To trigger other workflows
  issues: write            # To comment on PRs (PRs are a type of issue)
  checks: read             # To read workflow run status

jobs:
  update-submodule:
    runs-on: ubuntu-latest
    outputs:
      pr-number: ${{ steps.create-pr.outputs.pull-request-number }}
      should-run-wormhole: ${{ steps.analyze-changes.outputs.should-run-wormhole }}
      should-run-blackhole: ${{ steps.analyze-changes.outputs.should-run-blackhole }}
      old-sha: ${{ steps.update-submodule.outputs.old-sha }}
      new-sha: ${{ steps.update-submodule.outputs.new-sha }}
      has-changes: ${{ steps.update-submodule.outputs.has-changes }}
      changed-files: ${{ steps.analyze-changes.outputs.changed-files }}
      commits-table: ${{ steps.analyze-changes.outputs.commits-table }}
    steps:
      - name: Checkout parent repo
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Ensure we get full history

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Update submodule
        id: update-submodule
        run: |
          cd ${{ env.SUBMODULE_PATH }}
          OLD_SHA=$(git rev-parse --short=7 HEAD)
          echo "old-sha=$OLD_SHA" >> $GITHUB_OUTPUT

          # Fetch full history to ensure we can see all commits
          git fetch --unshallow origin main 2>/dev/null || git fetch origin main
          git checkout main
          git pull origin main

          NEW_SHA=$(git rev-parse --short=7 HEAD)
          echo "new-sha=$NEW_SHA" >> $GITHUB_OUTPUT

          if [ "$OLD_SHA" = "$NEW_SHA" ]; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No changes detected (SHA unchanged)"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes detected: $OLD_SHA -> $NEW_SHA"

            # Stage the submodule changes in the parent repo
            cd ../../..
            git add ${{ env.SUBMODULE_PATH }}
            echo "üìù Staged submodule changes"
          fi

      - name: Analyze changes and generate PR body
        id: analyze-changes
        if: steps.update-submodule.outputs.has-changes == 'true'
        run: |
          cd ${{ env.SUBMODULE_PATH }}
          OLD_SHA="${{ steps.update-submodule.outputs.old-sha }}"
          NEW_SHA="${{ steps.update-submodule.outputs.new-sha }}"

          # Get changed files once
          CHANGED_FILES=$(git diff --name-only ${OLD_SHA}..${NEW_SHA})
          echo "changed-files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Check for architecture-specific changes
          if echo "$CHANGED_FILES" | grep -q "^tt_llk_wormhole_b0/"; then
            echo "should-run-wormhole=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Detected Wormhole changes"
          else
            echo "should-run-wormhole=false" >> $GITHUB_OUTPUT
          fi

          if echo "$CHANGED_FILES" | grep -q "^tt_llk_blackhole/"; then
            echo "should-run-blackhole=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Detected Blackhole changes"
          else
            echo "should-run-blackhole=false" >> $GITHUB_OUTPUT
          fi

          # Generate commits table and save to GITHUB_OUTPUT
          COMMIT_COUNT=$(git log --oneline ${OLD_SHA}..${NEW_SHA} | wc -l)
          echo "Found $COMMIT_COUNT commits using ${OLD_SHA}..${NEW_SHA}"

          # Generate commits table content
          COMMITS_TABLE_CONTENT="| Commit | Message | Author | PR |"$'\n'
          COMMITS_TABLE_CONTENT+="|--------|---------|---------|-----|"$'\n'

          if [ "$COMMIT_COUNT" -gt 0 ]; then
            # Generate commits table content
            while IFS='|' read -r short_hash message author full_hash; do
              # Skip empty lines
              if [ -z "$short_hash" ]; then
                continue
              fi

              # Try to get the PR number from the commit message
              pr_number=$(echo "$message" | grep -oE '\(#[0-9]+\)' | grep -oE '[0-9]+' | head -1)
              if [ -n "$pr_number" ]; then
                COMMITS_TABLE_CONTENT+="| [\`$short_hash\`](https://github.com/tenstorrent/tt_llk/commit/$full_hash) | $message | $author | [#$pr_number](https://github.com/tenstorrent/tt_llk/pull/$pr_number) |"$'\n'
              else
                COMMITS_TABLE_CONTENT+="| [\`$short_hash\`](https://github.com/tenstorrent/tt_llk/commit/$full_hash) | $message | $author | - |"$'\n'
              fi
            done < <(git log --pretty=tformat:"%h|%s|%an|%H" ${OLD_SHA}..${NEW_SHA})
          else
            echo "No commits found - this shouldn't happen if we detected changes"
            COMMITS_TABLE_CONTENT+="| (No commits found) | - | - | - |"$'\n'
          fi

          # Save commits table to GITHUB_OUTPUT
          echo "commits-table<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS_TABLE_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Generate simple initial PR body (will be updated later with full details)
          cat > ../../../llk_commit_log.txt << EOF
          ## üîÑ LLK Submodule Update

          Updating LLK submodule from \`$OLD_SHA\` to \`$NEW_SHA\`.

          *This PR body will be updated with detailed information shortly...*
          EOF

      - name: Create Pull Request
        id: create-pr
        if: steps.update-submodule.outputs.has-changes == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.TEMP_METAL_PAT }}
          commit-message: "chore: update LLK submodule to ${{ steps.update-submodule.outputs.new-sha }}"
          title: "chore: update LLK submodule to ${{ steps.update-submodule.outputs.new-sha }}"
          branch: ${{ env.BRANCH_NAME }}
          delete-branch: true
          body-path: llk_commit_log.txt
          add-paths: |
            ${{ env.SUBMODULE_PATH }}
          draft: ${{ !inputs.skip_draft }}
          labels: |
            llk-update
            automated

      - name: Update PR body with changes information
        if: steps.update-submodule.outputs.has-changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.TEMP_METAL_PAT }}
        run: |
          PR_NUMBER="${{ steps.create-pr.outputs.pull-request-number }}"
          PR_URL="https://github.com/${{ github.repository }}/pull/$PR_NUMBER"
          OLD_SHA="${{ steps.update-submodule.outputs.old-sha }}"
          NEW_SHA="${{ steps.update-submodule.outputs.new-sha }}"

          # Get the changed files again for the updated body
          cd ${{ env.SUBMODULE_PATH }}
          CHANGED_FILES=$(git diff --name-only ${OLD_SHA}..${NEW_SHA})

          # Generate updated PR body with PR link (use commits table from step output)
          cat > ../../../updated_llk_commit_log.txt << EOF
          ## üîÑ LLK Submodule Update

          ### üìã Summary
          This PR updates the LLK submodule to the latest version from the main branch.

          ### üîó Commit Range
          | Previous Commit | New Commit | Compare |
          |----------------|------------|---------|
          | [\`$OLD_SHA\`](https://github.com/tenstorrent/tt_llk/commit/$OLD_SHA) | [\`$NEW_SHA\`](https://github.com/tenstorrent/tt_llk/commit/$NEW_SHA) | [View Changes](https://github.com/tenstorrent/tt_llk/compare/$OLD_SHA...$NEW_SHA) |

          ### üìù Commits Uplifted
          ${{ steps.analyze-changes.outputs.commits-table }}

          ### üìÅ Files Changed ($(echo "$CHANGED_FILES" | wc -l) files)
          <details>
          <summary>Click to expand file list</summary>

          $(echo "$CHANGED_FILES" | sed 's/^/- `/' | sed 's/$/`/')
          </details>

          ### üèóÔ∏è Architecture Impact
          $(if echo "$CHANGED_FILES" | grep -q "^tt_llk_wormhole_b0/"; then echo "- ‚ö†Ô∏è **Wormhole B0** changes detected - will trigger post-commit tests"; fi)
          $(if echo "$CHANGED_FILES" | grep -q "^tt_llk_blackhole/"; then echo "- ‚ö†Ô∏è **Blackhole** changes detected - will trigger post-commit tests"; fi)
          $(if ! echo "$CHANGED_FILES" | grep -q "^tt_llk_wormhole_b0/\|^tt_llk_blackhole/"; then echo "- ‚ÑπÔ∏è No architecture-specific changes detected"; fi)

          ### ü§ñ Automation Status
          - **Created by:** LLK Auto-Uplift Workflow
          - **Trigger:** $(if [ "${{ github.event_name }}" = "schedule" ]; then echo "Scheduled ($(date))"; elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then echo "Repository Dispatch"; else echo "Manual/Workflow Call"; fi)
          - **Branch:** \`${{ env.BRANCH_NAME }}\`

          ### üß™ Test Status
          Test results and workflow status will be updated here automatically.

          ---
          *This PR will be automatically updated with test results and merged upon successful completion of all required checks.*
          EOF

          # Update the PR body with the new content including PR link
          gh pr edit "$PR_NUMBER" --body-file ../../../updated_llk_commit_log.txt --repo "${{ github.repository }}"

          echo "‚úÖ Updated PR #$PR_NUMBER with PR link"

      - name: No changes summary
        if: steps.update-submodule.outputs.has-changes == 'false'
        run: |
          echo "üéâ LLK submodule is already up to date!"
          echo "Current SHA: ${{ steps.update-submodule.outputs.old-sha }}"

  trigger-and-monitor-workflows:
    needs: [update-submodule]
    if: needs.update-submodule.outputs.has-changes == 'true' && (needs.update-submodule.outputs.should-run-wormhole == 'true' || needs.update-submodule.outputs.should-run-blackhole == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout for GitHub CLI
        uses: actions/checkout@v4

      - name: Trigger and monitor workflows
        env:
          GH_TOKEN: ${{ secrets.TEMP_METAL_PAT }}
        run: |
          set -euo pipefail
          TIMEOUT_MINUTES=${{ inputs.workflow_timeout || 120 }}

          # Build workflow list based on detected changes
          WORKFLOWS_TO_RUN=()

          if [ "${{ needs.update-submodule.outputs.should-run-wormhole }}" == "true" ]; then
            WORKFLOWS_TO_RUN+=("all-post-commit-workflows.yaml")
          fi

          if [ "${{ needs.update-submodule.outputs.should-run-blackhole }}" == "true" ]; then
            WORKFLOWS_TO_RUN+=("blackhole-post-commit.yaml")
          fi

          if [ ${#WORKFLOWS_TO_RUN[@]} -eq 0 ]; then
            echo "No workflows to trigger based on changes detected"
            exit 0
          fi

          echo "üöÄ Triggering ${#WORKFLOWS_TO_RUN[@]} workflow(s)..."

          # Trigger workflows and collect run IDs
          RUN_IDS=()
          for workflow in "${WORKFLOWS_TO_RUN[@]}"; do
            echo "Triggering $workflow..."

            # Get existing runs before triggering to establish baseline
            EXISTING_RUNS=$(gh run list --workflow "$workflow" --branch "${{ env.BRANCH_NAME }}" --limit 10 --json databaseId --jq '.[].databaseId' | tr '\n' ' ')
            echo "Existing runs before trigger: $EXISTING_RUNS"

            if gh workflow run "$workflow" --ref "${{ env.BRANCH_NAME }}" --repo "${{ github.repository }}"; then
              echo "‚úÖ Successfully triggered $workflow"

              # Wait for the new run to appear with retry logic
              RUN_ID=""
              for i in {1..12}; do
                # Get current runs and find the new one
                CURRENT_RUNS=$(gh run list --workflow "$workflow" --branch "${{ env.BRANCH_NAME }}" --limit 10 --json databaseId --jq '.[].databaseId')

                # Find the run that wasn't in the existing list
                for run_id in $CURRENT_RUNS; do
                  if [[ ! " $EXISTING_RUNS " =~ " $run_id " ]]; then
                    RUN_ID="$run_id"
                    break
                  fi
                done

                if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
                  break
                fi
                echo "Attempt $i: Waiting for new workflow run to appear..."
                sleep 10
              done

              if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
                RUN_IDS+=("$RUN_ID")
                echo "Monitoring run ID: $RUN_ID"

                # Comment on PR with workflow link
                RUN_URL="https://github.com/${{ github.repository }}/actions/runs/$RUN_ID"
                gh pr comment "${{ needs.update-submodule.outputs.pr-number }}" \
                  --body "üîÑ **$workflow** triggered: [View run]($RUN_URL)" \
                  --repo "${{ github.repository }}"
              fi
            else
              echo "‚ùå Failed to trigger $workflow"
            fi
          done

          if [ ${#RUN_IDS[@]} -eq 0 ]; then
            echo "‚ùå No workflows were successfully triggered"
            exit 1
          fi

          # Monitor all runs
          echo "‚è≥ Monitoring ${#RUN_IDS[@]} workflow run(s)..."

          START_TIME=$(date +%s)
          TIMEOUT_SECONDS=$((TIMEOUT_MINUTES * 60))
          ALL_SUCCESS=true

          while [ ${#RUN_IDS[@]} -gt 0 ]; do
            # Check timeout
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))

            if [ $ELAPSED -ge $TIMEOUT_SECONDS ]; then
              echo "‚è∞ Timeout reached after ${TIMEOUT_MINUTES} minutes"
              for run_id in "${RUN_IDS[@]}"; do
                RUN_URL="https://github.com/${{ github.repository }}/actions/runs/$run_id"
                gh pr comment "${{ needs.update-submodule.outputs.pr-number }}" \
                  --body "‚è∞ **Workflow timed out** after ${TIMEOUT_MINUTES} minutes: [View run]($RUN_URL)" \
                  --repo "${{ github.repository }}"
              done
              ALL_SUCCESS=false
              break
            fi

            # Check status of all runs
            REMAINING_RUNS=()
            for run_id in "${RUN_IDS[@]}"; do
              STATUS=$(gh run view "$run_id" --json status --jq '.status // "unknown"' 2>/dev/null || echo "unknown")

              if [ "$STATUS" == "completed" ]; then
                CONCLUSION=$(gh run view "$run_id" --json conclusion --jq '.conclusion // "unknown"')
                RUN_URL="https://github.com/${{ github.repository }}/actions/runs/$run_id"

                if [ "$CONCLUSION" == "success" ]; then
                  echo "‚úÖ Run $run_id completed successfully"
                  gh pr comment "${{ needs.update-submodule.outputs.pr-number }}" \
                    --body "‚úÖ **Workflow passed**: [View run]($RUN_URL)" \
                    --repo "${{ github.repository }}"
                else
                  echo "‚ùå Run $run_id failed with conclusion: $CONCLUSION"
                  gh pr comment "${{ needs.update-submodule.outputs.pr-number }}" \
                    --body "‚ùå **Workflow failed** (conclusion: \`$CONCLUSION\`): [View run]($RUN_URL)" \
                    --repo "${{ github.repository }}"
                  ALL_SUCCESS=false
                fi
              else
                # Still running, keep monitoring
                REMAINING_RUNS+=("$run_id")
                echo "‚åõ Run $run_id status: $STATUS (${ELAPSED}s/${TIMEOUT_SECONDS}s)"
              fi
            done

            RUN_IDS=("${REMAINING_RUNS[@]}")

            # Wait before next check
            if [ ${#RUN_IDS[@]} -gt 0 ]; then
              sleep 60
            fi
          done

          if [ "$ALL_SUCCESS" == "true" ]; then
            echo "üéâ All workflows completed successfully"
          else
            echo "üí• One or more workflows failed or timed out"
            exit 1
          fi

  finalize:
    needs: [update-submodule, trigger-and-monitor-workflows]
    if: always() && needs.update-submodule.outputs.has-changes == 'true' && needs.update-submodule.result == 'success' && (needs.trigger-and-monitor-workflows.result == 'success' || needs.trigger-and-monitor-workflows.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Auto-merge PR
        env:
          GH_TOKEN: ${{ secrets.TEMP_METAL_PAT }}
        run: |
          echo "üöÄ Finalizing PR merge..."

          PR_NUMBER="${{ needs.update-submodule.outputs.pr-number }}"

          # Mark PR as ready if it was created as draft
          if [ "${{ inputs.skip_draft }}" != "true" ]; then
            echo "üìù Marking PR as ready for review..."
            if ! gh pr ready "$PR_NUMBER" --repo "${{ github.repository }}"; then
              echo "‚ö†Ô∏è Unable to mark PR as ready - may already be ready or have insufficient permissions"
            fi
          fi

          # Comment on PR that it's ready for review
          echo "üìù PR #$PR_NUMBER is ready for review and merge"
          gh pr comment "$PR_NUMBER" \
            --body "üéâ **LLK submodule update completed successfully!**
            All workflows have passed. This PR is ready for review and merge." \
            --repo "${{ github.repository }}" || echo "‚ö†Ô∏è Unable to comment on PR - insufficient permissions"

          echo "‚úÖ Workflow completed successfully - PR #$PR_NUMBER is ready for manual review"
