name: "[internal] ttnn unit tests impl"

# This workflow is being used to test both the wheel and venv test modes.
# The wrapper workflow will set the appropriate inputs for each mode.
# If the create-venv input is true, then the workflow will call the create_venv.sh script.
# This is a bit of a misnomer, because there is already a venv in the container.
# It really is just installing the local python packages (ttnn) into the venv in editable install mode.
# This mode of operation actually requires TT_METAL_HOME to be set to /work.
# If the create-venv input is false, then the workflow will install the wheel and run the tests using the wheel.

on:
  workflow_call:
    inputs:
      arch:
        required: true
        type: string
      runner-label:
        required: true
        type: string
      timeout:
        required: false
        type: number
        default: 45
      num-groups:
        required: false
        type: number
        default: 12
      docker-image:
        required: true
        type: string
      build-artifact-name:
        required: true
        type: string
      wheel-artifact-name:
        required: true
        type: string
      create-venv:
        required: false
        default: false
        type: boolean

jobs:
  ttnn:
    strategy:
      # Do not fail-fast because we need to ensure all tests go to completion
      # so we try not to get hanging machines
      fail-fast: false
      matrix:
        os: ["ubuntu-22.04"]
        test-group:
          - name: ttnn group 1
            cmd: pytest tests/ttnn/unit_tests -xv --splits ${{ inputs.num-groups }} --group 1 -m "not disable_fast_runtime_mode"
          - name: ttnn group 2
            cmd: pytest tests/ttnn/unit_tests -xv --splits ${{ inputs.num-groups }} --group 2 -m "not disable_fast_runtime_mode"
          - name: ttnn group 3
            cmd: pytest tests/ttnn/unit_tests -xv --splits ${{ inputs.num-groups }} --group 3 -m "not disable_fast_runtime_mode"
          - name: ttnn group 4
            cmd: pytest tests/ttnn/unit_tests -xv --splits ${{ inputs.num-groups }} --group 4 -m "not disable_fast_runtime_mode"
          - name: ttnn group 5
            cmd: pytest tests/ttnn/unit_tests -xv --splits ${{ inputs.num-groups }} --group 5 -m "not disable_fast_runtime_mode"
          - name: ttnn group 6
            cmd: pytest tests/ttnn/unit_tests -xv --splits ${{ inputs.num-groups }} --group 6 -m "not disable_fast_runtime_mode"
          - name: ttnn group 7
            cmd: pytest tests/ttnn/unit_tests -xv --splits ${{ inputs.num-groups }} --group 7 -m "not disable_fast_runtime_mode"
          - name: ttnn group 8
            cmd: pytest tests/ttnn/unit_tests -xv --splits ${{ inputs.num-groups }} --group 8 -m "not disable_fast_runtime_mode"
          - name: ttnn group 9
            cmd: pytest tests/ttnn/unit_tests -xv --splits ${{ inputs.num-groups }} --group 9 -m "not disable_fast_runtime_mode"
          - name: ttnn group 10
            cmd: pytest tests/ttnn/unit_tests -xv --splits ${{ inputs.num-groups }} --group 10 -m "not disable_fast_runtime_mode"
          - name: ttnn group 11
            cmd: pytest tests/ttnn/unit_tests -xv --splits ${{ inputs.num-groups }} --group 11 -m "not disable_fast_runtime_mode"
          - name: ttnn group 12
            cmd: pytest tests/ttnn/unit_tests -xv --splits ${{ inputs.num-groups }} --group 12 -m "not disable_fast_runtime_mode"
          - name: ttnn fast runtime off
            cmd: pytest tests/ttnn/unit_tests -xv -m requires_fast_runtime_mode_off
            fast_runtime_mode_off: true
          - name: ttnn example tests
            cmd: ./tests/scripts/run_ttnn_examples.sh
    name: ${{ matrix.test-group.name }} ${{ inputs.arch }} ${{ inputs.runner-label }}
    runs-on:
      - ${{ inputs.runner-label }}
      - "in-service"
    container:
      image: ${{ inputs.docker-image }}
      env:
        ARCH_NAME: ${{ inputs.arch }}
        GITHUB_ACTIONS: true
        LOGURU_LEVEL: INFO
        PYTHONPATH: /work
      volumes:
        - ${{ github.workspace }}/docker-job:/work # Subdir to workaround https://github.com/actions/runner/issues/691
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /mnt/MLPerf:/mnt/MLPerf
      options: "--device /dev/tenstorrent"
    defaults:
      run:
        shell: bash
        working-directory: /work # https://github.com/actions/runner/issues/878
    steps:
      - name: ⬇️  Setup Job
        uses: tenstorrent/tt-metal/.github/actions/setup-job@blozano-test-venv
        timeout-minutes: 10
        with:
          build-artifact-name: ${{ inputs.build-artifact-name }}
          wheel-artifact-name: ${{ inputs.wheel-artifact-name }}
          create-venv: ${{ inputs.create-venv }}

      - name: Set TT_METAL_HOME if create-venv is true
        if: ${{ inputs.create-venv }}
        run: |
          echo "TT_METAL_HOME=/work" >> $GITHUB_ENV

      - name: Set ttnn fast runtime if exists in config
        if: ${{ matrix.test-group.fast_runtime_mode_off }}
        run: |
          echo "TTNN_CONFIG_OVERRIDES={\"enable_fast_runtime_mode\": false}" >> $GITHUB_ENV

      - name: ${{ matrix.test-group.name }} tests
        timeout-minutes: ${{ inputs.timeout }}
        run: |
          ${{ matrix.test-group.cmd }}

      - uses: ./.github/actions/slack-report
        if: ${{ failure() }}
        with:
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          owner: U06CXU895AP # Michael Chiou

      - uses: tenstorrent/tt-metal/.github/actions/upload-artifact-with-job-uuid@main
        timeout-minutes: 10
        if: ${{ !cancelled() }}
        with:
          path: |
            /work/generated/test_reports/
          prefix: "test_reports_"

      - uses: tenstorrent/tt-metal/.github/actions/cleanup@main
        if: always()
