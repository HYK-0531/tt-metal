name: "[internal] Single-card Device perf regressions impl"

on:
  workflow_call:
    inputs:
      os:
        required: false
        type: string
        default: "ubuntu-22.04"
      docker-image:
        required: true
        type: string
      build-artifact-name:
        required: true
        type: string
      wheel-artifact-name:
        required: true
        type: string

jobs:
  device-perf:
    strategy:
      # Do not fail-fast because we need to ensure all tests go to completion
      # so we try not to get hanging machines
      fail-fast: false
      matrix:
        test-info: [
          {name: "N300 WH B0 not yet ported", arch: wormhole_b0, runs-on: ["N300", "pipeline-perf", "bare-metal", "in-service"], machine-type: "bare_metal", civ2-compatible: false, timeout: 120},
          {name: "N300 WH B0", arch: wormhole_b0, runs-on: ["tt-beta-ubuntu-2204-n300-large-stable"], machine-type: "CIv2", civ2-compatible: true, timeout: 120},
        ]
    name: "${{ matrix.test-info.name }} device perf"
    runs-on: ${{ matrix.test-info.runs-on }}
    container:
      image: ${{ inputs.docker-image || 'docker-image-unresolved!' }}
      env:
        TT_METAL_HOME: /work
        PYTHONPATH: /work
        LD_LIBRARY_PATH: /work/build/lib
        ARCH_NAME: ${{ matrix.test-info.arch }}
        LOGURU_LEVEL: INFO
        GITHUB_ACTIONS: true
      volumes:
        - ${{ github.workspace }}/docker-job:/work # Subdir to workaround https://github.com/actions/runner/issues/691
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /mnt/MLPerf:/mnt/MLPerf:ro
      options: "--device /dev/tenstorrent"
    defaults:
      run:
        shell: bash
        working-directory: /work # https://github.com/actions/runner/issues/878
    steps:
      - name: ⬇️  Setup Job
        uses: tenstorrent/tt-metal/.github/actions/setup-job@main
        timeout-minutes: 10
        with:
          build-artifact-name: ${{ inputs.build-artifact-name }}
          wheel-artifact-name: ${{ inputs.wheel-artifact-name }}

      - name: ${{ matrix.test-info.name }} tests
        id: generate-device-perf-report
        timeout-minutes: ${{ matrix.test-info.timeout }}
        env:
          TRACY_NO_INVARIANT_CHECK: 1
        run: |
          set -x
          if [[ "${{ matrix.test-info.arch }}" == "wormhole_b0" ]]; then
            export MAGIC_ENV=wormhole_b0_80_arch_eth_dispatch.yaml
          fi

          # Track failed tests
          failed_tests=()
          exit_code=0

          # Function to run test and track failures
          run_test() {
            local test_name="$1"
            local test_command="$2"
            echo "Running test: $test_name"
            if ! eval "$test_command"; then
              echo "❌ FAILED: $test_name"
              failed_tests+=("$test_name")
              exit_code=1
            else
              echo "✅ PASSED: $test_name"
            fi
          }

          if [[ "${{ matrix.test-info.civ2-compatible }}" != "true" ]]; then
            echo "Running tests that are not yet ported to CIv2"
            run_test "convnet_mnist" "pytest models/demos/convnet_mnist/tests/ -m models_device_performance_bare_metal"
            run_test "mnist" "pytest models/demos/mnist/tests -m models_device_performance_bare_metal"
            run_test "falcon7b_common" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/demos/falcon7b_common/tests -m models_device_performance_bare_metal"
            run_test "segformer" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/demos/segformer/tests/perf -m models_device_performance_bare_metal"
          else
            echo "Running CIv2 compatible tests"
            run_test "stable_diffusion" "pytest models/demos/wormhole/stable_diffusion/tests -m models_device_performance_bare_metal --timeout=600"
            run_test "distilbert" "pytest models/demos/distilbert/tests -m models_device_performance_bare_metal"
            run_test "vgg" "pytest models/demos/vgg/tests/ -m models_device_performance_bare_metal"
            run_test "bert_tiny" "pytest models/demos/bert_tiny/tests/ -m models_device_performance_bare_metal"
            run_test "squeezebert" "pytest models/demos/squeezebert/tests -m models_device_performance_bare_metal"
            run_test "roberta" "pytest models/demos/roberta/tests/ -m models_device_performance_bare_metal"
            run_test "resnet50" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/demos/wormhole/resnet50/tests -m models_device_performance_bare_metal"
            run_test "functional_unet" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/experimental/functional_unet/tests/test_unet_perf.py -m models_device_performance_bare_metal"
            run_test "mamba" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/demos/wormhole/mamba/tests -m models_device_performance_bare_metal"
            run_test "BERT_large_11" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/demos/metal_BERT_large_11/tests -m models_device_performance_bare_metal"
            run_test "wormhole_bert_tiny" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/demos/wormhole/bert_tiny/tests -m models_device_performance_bare_metal"
            run_test "yolov4" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/demos/yolov4/tests -m models_device_performance_bare_metal"
            run_test "wormhole_distilbert" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/demos/wormhole/distilbert/tests -m models_device_performance_bare_metal"
            run_test "mobilenetv2" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/demos/mobilenetv2/tests -m models_device_performance_bare_metal"
            run_test "yolov8x" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/demos/yolov8x/tests -m models_device_performance_bare_metal"
            run_test "experimental_yolov8s" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/experimental/yolov8s/tests -m models_device_performance_bare_metal"
            run_test "functional_vanilla_unet" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/experimental/functional_vanilla_unet/test -m models_device_performance_bare_metal"
            run_test "yolov8s_world" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/demos/yolov8s_world/tests -m models_device_performance_bare_metal"
            run_test "vgg_unet" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/demos/vgg_unet/tests -m models_device_performance_bare_metal"
            run_test "yolov10" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/experimental/yolov10/tests -m models_device_performance_bare_metal"
            run_test "ufld_v2" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/demos/ufld_v2/tests -m models_device_performance_bare_metal"
            run_test "vit" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/demos/wormhole/vit/demo/test_vit_device_perf.py -m models_device_performance_bare_metal"
            run_test "stable_diffusion_xl" "WH_ARCH_YAML=\$MAGIC_ENV pytest models/experimental/stable_diffusion_xl_base/tests/test_sdxl_perf.py -m models_device_performance_bare_metal"
          fi

          # Report results
          echo "========== TEST RESULTS SUMMARY =========="
          if [ ${#failed_tests[@]} -eq 0 ]; then
            echo "✅ All tests passed!"
          else
            echo "❌ ${#failed_tests[@]} test(s) failed:"
            for test in "${failed_tests[@]}"; do
              echo "  - $test"
            done
            echo "Overall pipeline result: FAILED"
          fi
          echo "=========================================="

          # Exit with error code if any tests failed
          exit $exit_code

          export DEVICE_PERF_REPORT_FILENAME=Models_Device_Perf_${{ matrix.test-info.test-type }}_$(date +%Y_%m_%d).csv
          python3 models/perf/merge_device_perf_results.py $DEVICE_PERF_REPORT_FILENAME
          echo "device_perf_report_filename=$DEVICE_PERF_REPORT_FILENAME" >> "$GITHUB_OUTPUT"

      - name: Check device perf report exists
        id: check-device-perf-report
        if: ${{ !cancelled() }}
        run: |
          ls -hal ${{ steps.generate-device-perf-report.outputs.device_perf_report_filename }}

      - name: Upload device perf report
        timeout-minutes: 5
        if: ${{ !cancelled() && steps.check-device-perf-report.conclusion == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: device-perf-report-csv-${{ matrix.test-info.test-type }}-${{ matrix.test-info.arch }}-${{ matrix.test-info.machine-type }}
          path: /work/${{ steps.generate-device-perf-report.outputs.device_perf_report_filename }}

      - uses: tenstorrent/tt-metal/.github/actions/upload-artifact-with-job-uuid@main
        timeout-minutes: 10
        if: ${{ !cancelled() }}
        with:
          prefix: "test_reports_"

      - uses: tenstorrent/tt-metal/.github/actions/cleanup@main
        if: always()
